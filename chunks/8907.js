(self.webpackChunkgeog863_final=self.webpackChunkgeog863_final||[]).push([[8907],{8907:(e,t,r)=>{"use strict";r.r(t),r.d(t,{createContextOrErrorHTML:()=>n.s,Program:()=>s.Z,BufferObject:()=>o.Z,Texture:()=>a.Z,VertexArrayObject:()=>i.Z,Renderbuffer:()=>c.Z,FramebufferObject:()=>f.Z,createProgram:()=>l.H,glslifyDefineMap:()=>l.K,ProgramCache:()=>h.Z,RenderingContext:()=>u.Z,ShaderCompiler:()=>d.Z});var n=r(35563),s=r(55408),o=r(75795),a=r(74271),i=r(81739),c=r(77572),f=r(49922),l=r(27689),h=r(89964),u=r(72767),d=r(49525)},49525:(e,t,r)=>{"use strict";r.d(t,{Z:()=>n});const n=class{constructor(e){this.readFile=e}resolveIncludes(e){return this.resolve(e)}resolve(e,t=new Map){if(t.has(e))return t.get(e);const r=this.read(e);if(!r)throw new Error(`cannot find shader file ${e}`);const n=/^[^\S\n]*#include\s+<(\S+)>[^\S\n]?/gm;let s=n.exec(r);const o=[];for(;null!=s;)o.push({path:s[1],start:s.index,length:s[0].length}),s=n.exec(r);let a=0,i="";return o.forEach((e=>{i+=r.slice(a,e.start),i+=t.has(e.path)?"":this.resolve(e.path,t),a=e.start+e.length})),i+=r.slice(a),t.set(e,i),i}read(e){return this.readFile(e)}}},27689:(e,t,r)=>{"use strict";r.d(t,{H:()=>o,K:()=>s});var n=r(55408);function s(e){let t="";for(const r in e){const n=e[r];if("boolean"==typeof n)n&&(t+=`#define ${r}\n`);else if("number"==typeof n)t+=`#define ${r} ${n.toFixed()}\n`;else if("object"==typeof n){const e=n.options;let s=0;for(const r in e)t+=`#define ${e[r]} ${(s++).toFixed()}\n`;t+=`#define ${r} ${e[n.value]}\n`}}return t}function o(e,t,r,s){r=r||{},s=s||"";const o="function"==typeof t.shaders?t.shaders(r):t.shaders;return new n.Z(e,s+o.vertexShader,s+o.fragmentShader,t.attributes)}}}]);