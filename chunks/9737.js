(self.webpackChunkgeog863_final=self.webpackChunkgeog863_final||[]).push([[9737],{63308:(e,a,t)=>{"use strict";t.d(a,{T:()=>n});const n={BingMapsLayer:async()=>(await t.e(2944).then(t.bind(t,2944))).default,BuildingSceneLayer:async()=>(await Promise.all([t.e(6733),t.e(3711)]).then(t.bind(t,73711))).default,CSVLayer:async()=>(await t.e(1039).then(t.bind(t,81039))).default,ElevationLayer:async()=>(await t.e(901).then(t.bind(t,60901))).default,FeatureLayer:async()=>(await Promise.resolve().then(t.bind(t,89307))).default,GroupLayer:async()=>(await t.e(5045).then(t.bind(t,85045))).default,GeoRSSLayer:async()=>(await t.e(8988).then(t.bind(t,65900))).default,ImageryLayer:async()=>(await Promise.all([t.e(8678),t.e(2061),t.e(2577),t.e(9459)]).then(t.bind(t,29459))).default,ImageryTileLayer:async()=>(await Promise.all([t.e(8678),t.e(2061),t.e(2577),t.e(9166)]).then(t.bind(t,39166))).default,IntegratedMeshLayer:async()=>(await Promise.all([t.e(6733),t.e(1930)]).then(t.bind(t,31930))).default,KMLLayer:async()=>(await t.e(476).then(t.bind(t,40476))).default,MapImageLayer:async()=>(await t.e(4736).then(t.bind(t,94736))).default,MapNotesLayer:async()=>(await t.e(88).then(t.bind(t,10088))).default,OpenStreetMapLayer:async()=>(await t.e(67).then(t.bind(t,60067))).default,PointCloudLayer:async()=>(await t.e(6097).then(t.bind(t,66097))).default,RouteLayer:async()=>(await t.e(5377).then(t.bind(t,5377))).default,SceneLayer:async()=>(await Promise.all([t.e(6733),t.e(3970)]).then(t.bind(t,43970))).default,StreamLayer:async()=>(await t.e(6214).then(t.bind(t,26214))).default,TileLayer:async()=>(await t.e(9655).then(t.bind(t,69655))).default,UnknownLayer:async()=>(await t.e(416).then(t.bind(t,80416))).default,UnsupportedLayer:async()=>(await t.e(8351).then(t.bind(t,38351))).default,VectorTileLayer:async()=>(await Promise.all([t.e(7889),t.e(5239)]).then(t.bind(t,76437))).default,WebTileLayer:async()=>(await t.e(5150).then(t.bind(t,55150))).default,WMSLayer:async()=>(await t.e(9717).then(t.bind(t,89717))).default,WMTSLayer:async()=>(await t.e(83).then(t.bind(t,80083))).default}},69290:(e,a,t)=>{"use strict";function n(e,a){return!!e.typeKeywords&&e.typeKeywords.indexOf(a)>-1}t.d(a,{_$:()=>n})},69737:(e,a,t)=>{"use strict";t.r(a),t.d(a,{fromItem:()=>y,selectLayerClassPath:()=>u});var n=t(18029),r=t(29107),l=t(65869),i=t(88143),s=t(69290),c=t(63308);function y(e){return!e.portalItem||e.portalItem instanceof i.default||(e={...e,portalItem:new i.default(e.portalItem)}),function(e){return e.load().then(u).then(o)}(e.portalItem).then((a=>{const t={portalItem:e.portalItem,...a.properties},n=a.constructor;return Promise.resolve(new n(t))}))}function u(e){switch(e.type){case"Map Service":return function(e){return function(e){return p(e.url).then((e=>e.tileInfo))}(e).then((e=>e?{className:"TileLayer"}:{className:"MapImageLayer"}))}(e);case"Feature Service":return function(e){return d(e).then((e=>{if("object"==typeof e){const a={};return null!=e.id&&(a.layerId=e.id),{className:"FeatureLayer",properties:a}}return{className:"GroupLayer"}}))}(e);case"Feature Collection":return async function(e){return await e.load(),(0,s._$)(e,"Map Notes")?{className:"MapNotesLayer"}:(0,s._$)(e,"Route Layer")?{className:"RouteLayer"}:1===m(await e.fetchData())?{className:"FeatureLayer"}:{className:"GroupLayer"}}(e);case"Scene Service":return function(e){return d(e).then((a=>{if("object"==typeof a){const t={};let n;if(null!=a.id?(t.layerId=a.id,n=`${e.url}/layers/${a.id}`):n=e.url,Array.isArray(e.typeKeywords)&&e.typeKeywords.length>0){const a={IntegratedMesh:"IntegratedMeshLayer","3DObject":"SceneLayer",Point:"SceneLayer",PointCloud:"PointCloudLayer",Building:"BuildingSceneLayer"};for(const t of Object.keys(a))if(-1!==e.typeKeywords.indexOf(t))return{className:a[t]}}return p(n).then((e=>{let a="SceneLayer";const n={Point:"SceneLayer","3DObject":"SceneLayer",IntegratedMesh:"IntegratedMeshLayer",PointCloud:"PointCloudLayer",Building:"BuildingSceneLayer"};return e&&e.layerType&&n[e.layerType]&&(a=n[e.layerType]),{className:a,properties:t}}))}return{className:"GroupLayer"}}))}(e);case"Image Service":return async function(e){var a,t,n;await e.load();const r=null!=(a=null==(t=e.typeKeywords)?void 0:t.map((e=>e.toLowerCase())))?a:[];if(r.indexOf("elevation 3d layer")>-1)return{className:"ElevationLayer"};if(r.indexOf("tiled imagery")>-1)return{className:"ImageryTileLayer"};const l=await e.fetchData(),i=null==l?void 0:l.layerType;return"ArcGISTiledImageServiceLayer"===i?{className:"ImageryTileLayer"}:"ArcGISImageServiceLayer"===i?{className:"ImageryLayer"}:"map"===(null==(n=(await p(e.url)).cacheType)?void 0:n.toLowerCase())?{className:"ImageryTileLayer"}:{className:"ImageryLayer"}}(e);case"Stream Service":return{className:"StreamLayer"};case"Vector Tile Service":return{className:"VectorTileLayer"};case"KML":return{className:"KMLLayer"};case"WMTS":return{className:"WMTSLayer"};case"WMS":return{className:"WMSLayer"};default:return Promise.reject(new r.Z("portal:unknown-item-type","Unknown item type '${type}'",{type:e.type}))}}function o(e){return(0,c.T[e.className])().then((a=>({constructor:a,properties:e.properties})))}function d(e){return!e.url||e.url.match(/\/\d+$/)?Promise.resolve({}):e.load().then((()=>e.fetchData())).then((a=>m(a)>0?f(a):p(e.url).then(f)))}function f(e){return 1===m(e)&&{id:(0,n.Wg)(L(e))}}function L(e){const a=e.layers;if(a&&a.length)return a[0].id;const t=e.tables;return t&&t.length?t[0].id:null}function m(e){var a,t,n,r;return(null!=(a=null==e||null==(t=e.layers)?void 0:t.length)?a:0)+(null!=(n=null==e||null==(r=e.tables)?void 0:r.length)?n:0)}function p(e){return(0,l.default)(e,{responseType:"json",query:{f:"json"}}).then((e=>e.data))}}}]);