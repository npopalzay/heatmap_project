(self.webpackChunkgeog863_final=self.webpackChunkgeog863_final||[]).push([[4987],{44987:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>h});var n=r(87397),s=(r(1867),r(9783),r(9385),r(82203)),i=r(65482),a=r(17593),o=(r(15392),r(11786),r(23889)),N=r(65869),u=r(12377),I=r(10114),_=(r(36458),r(69539)),f=r(3414),T=r(11344),c=r(63429),l=r(98054),S=r(83120),y=r(1441),A=r(53530),U=r(31680),O=r(94336),E=r(95510),R=r(8347),g=r(81731),p=r(13854),d=r(41402);let m=class extends o.Z{constructor(e){super(e),this.url=null}areasAndLengths(e,t){return async function(e,t,r){const n=(0,u.en)(e),s={...n.query,f:"json",...t.toJSON()},i=(0,u.lA)(s,r);return(0,N.default)(n.path+"/areasAndLengths",i).then((e=>e.data))}(this.url,e,t)}autoComplete(e,t,r){return async function(e,t,r,n){const s=t[0].spatialReference,i=(0,u.en)(e),a={...i.query,f:"json",sr:JSON.stringify(s.toJSON()),polygons:JSON.stringify((0,_.F)(t).geometries),polylines:JSON.stringify((0,_.F)(r).geometries)},o=(0,u.lA)(a,n);return(0,N.default)(i.path+"/autoComplete",o).then((({data:e})=>(e.geometries||[]).map((({rings:e})=>new I.Z({spatialReference:s,rings:e})))))}(this.url,e,t,r)}buffer(e,t){return async function(e,t,r){const n=(0,u.en)(e),s={...n.query,f:"json",...t.toJSON()},i=t.outSpatialReference||t.geometries[0].spatialReference,a=(0,u.lA)(s,r);return(0,N.default)(n.path+"/buffer",a).then((e=>(e.data.geometries||[]).map((({rings:e})=>new I.Z({spatialReference:i,rings:e})))))}(this.url,e,t)}convexHull(e,t){return async function(e,t,r){const n=t[0].spatialReference,s=(0,u.en)(e),i={...s.query,f:"json",sr:JSON.stringify(n.toJSON()),geometries:JSON.stringify((0,_.F)(t))},a=(0,u.lA)(i,r);return(0,N.default)(s.path+"/convexHull",a).then((({data:e})=>(0,f.im)(e.geometry).set({spatialReference:n})))}(this.url,e,t)}cut(e,t,r){return async function(e,t,r,n){const s=(0,u.en)(e),i=t[0].spatialReference,a={...n,query:{...s.query,f:"json",sr:JSON.stringify(i),target:JSON.stringify({geometryType:(0,f.Ji)(t[0]),geometries:t}),cutter:JSON.stringify(r)}},o=await(0,N.default)(s.path+"/cut",a),{cutIndexes:I,geometries:_=[]}=o.data;return{cutIndexes:I,geometries:_.map((e=>{const t=(0,f.im)(e);return t.spatialReference=i,t}))}}(this.url,e,t,r)}densify(e,t){return async function(e,t,r){const n=t.geometries[0].spatialReference,s=(0,u.en)(e),i={...s.query,f:"json",...t.toJSON()},a=(0,u.lA)(i,r);return(0,N.default)(s.path+"/densify",a).then((({data:e})=>(e.geometries||[]).map((e=>(0,f.im)(e).set({spatialReference:n})))))}(this.url,e,t)}difference(e,t,r){return async function(e,t,r,n){const s=t[0].spatialReference,i=(0,u.en)(e);let a={query:{...i.query,f:"json",sr:JSON.stringify(s.toJSON()),geometries:JSON.stringify((0,_.F)(t)),geometry:JSON.stringify({geometryType:(0,f.Ji)(r),geometry:r.toJSON()})}};return n&&(a={...n,...a}),(0,N.default)(i.path+"/difference",a).then((({data:e})=>(e.geometries||[]).map((e=>(0,f.im)(e).set({spatialReference:s})))))}(this.url,e,t,r)}distance(e,t){return async function(e,t,r){const n=(0,u.en)(e),s={...n.query,f:"json",...t.toJSON()},i=(0,u.lA)(s,r);return(0,N.default)(n.path+"/distance",i).then((({data:e})=>e&&e.distance))}(this.url,e,t)}fromGeoCoordinateString(e,t){return async function(e,t,r){const n={};null!=t.sr&&"object"==typeof t.sr?n.sr=t.sr.wkid||JSON.stringify(t.sr):n.sr=t.sr,n.strings=JSON.stringify(t.strings);const s=t.conversionType||"mgrs";n.conversionType=T.s.toJSON(s),n.conversionMode=t.conversionMode;const i=(0,u.en)(e),a={...i.query,f:"json",...n},o=(0,u.lA)(a,r);return(0,N.default)(i.path+"/fromGeoCoordinateString",o).then((({data:e})=>e.coordinates))}(this.url,e,t)}generalize(e,t){return async function(e,t,r){const n=(t=l.Z.from(t)).toJSON(),s=(0,c.G)(t),i=(0,u.en)(e),a={...i.query,f:"json",...s},o=n.geometries[0].spatialReference,I=(0,u.lA)(a,r);return(0,N.default)(i.path+"/generalize",I).then((({data:e})=>(e.geometries||[]).map((e=>(0,f.im)(e).set({spatialReference:o})))))}(this.url,e,t)}intersect(e,t,r){return async function(e,t,r,n){const s=t[0].spatialReference,i=(0,u.en)(e),a={...i.query,f:"json",sr:JSON.stringify(s.toJSON()),geometries:JSON.stringify((0,_.F)(t)),geometry:JSON.stringify({geometryType:(0,f.Ji)(r),geometry:r.toJSON()})},o=(0,u.lA)(a,n);return(0,N.default)(i.path+"/intersect",o).then((({data:e})=>(e.geometries||[]).map((e=>(0,f.im)(e).set({spatialReference:s})))))}(this.url,e,t,r)}labelPoints(e,t){return function(e,t,r){const n=t.map((e=>e.toJSON())),s=t[0].spatialReference,i=(0,u.en)(e),a={...i.query,f:"json",sr:s.wkid?s.wkid:JSON.stringify(s.toJSON()),polygons:JSON.stringify(n)},o=(0,u.lA)(a,r);return(0,N.default)(i.path+"/labelPoints",o).then((({data:e})=>(e.labelPoints||[]).map((e=>(0,f.im)(e).set({spatialReference:s})))))}(this.url,e,t)}lengths(e,t){return async function(e,t,r){t=y.Z.from(t);const n=(0,S.u)(t),s=(0,u.en)(e),i={...s.query,f:"json",...n},a=(0,u.lA)(i,r);return(0,N.default)(s.path+"/lengths",a).then((({data:e})=>e))}(this.url,e,t)}offset(e,t){return async function(e,t,r){t=U.Z.from(t);const n=(0,A.l)(t),s=(0,u.en)(e),i={...s.query,f:"json",...n},a=t.geometries[0].spatialReference,o=(0,u.lA)(i,r);return(0,N.default)(s.path+"/offset",o).then((({data:e})=>(e.geometries||[]).map((e=>(0,f.im)(e).set({spatialReference:a})))))}(this.url,e,t)}project(e,t){return(0,O.i)(this.url,e,t)}relation(e,t){return async function(e,t,r){t=R.Z.from(t);const n=(0,E.c)(t),s=(0,u.en)(e),i={...s.query,f:"json",...n},a=(0,u.lA)(i,r);return(0,N.default)(s.path+"/relation",a).then((({data:e})=>e.relations))}(this.url,e,t)}reshape(e,t,r){return async function(e,t,r,n){const s=t.spatialReference,i=(0,u.en)(e),a={...i.query,f:"json",sr:JSON.stringify(s.toJSON()),target:JSON.stringify({geometryType:(0,f.Ji)(t),geometry:t.toJSON()}),reshaper:JSON.stringify(r.toJSON())},o=(0,u.lA)(a,n);return(0,N.default)(i.path+"/reshape",o).then((({data:e})=>(0,f.im)(e.geometry).set({spatialReference:s})))}(this.url,e,t,r)}simplify(e,t){return async function(e,t,r){const n="string"==typeof e?(0,a.mN)(e):e,s=t[0].spatialReference,i=(0,f.Ji)(t[0]),o={...r,query:{...n.query,f:"json",sr:s.wkid?s.wkid:JSON.stringify(s),geometries:JSON.stringify((0,_.F)(t))}},{data:u}=await(0,N.default)(n.path+"/simplify",o);return(0,_.o)(u.geometries,i,s)}(this.url,e,t)}toGeoCoordinateString(e,t){return async function(e,t,r){const n={};null!=t.sr&&"object"==typeof t.sr?n.sr=t.sr.wkid||JSON.stringify(t.sr):n.sr=t.sr,n.coordinates=JSON.stringify(t.coordinates);const s=t.conversionType||"mgrs";n.conversionType=T.s.toJSON(s),n.conversionMode=t.conversionMode,n.numOfDigits=t.numOfDigits,n.rounding=t.rounding,n.addSpaces=t.addSpaces;const i=(0,u.en)(e),a={...i.query,f:"json",...n},o=(0,u.lA)(a,r);return(0,N.default)(i.path+"/toGeoCoordinateString",o).then((({data:e})=>e.strings))}(this.url,e,t)}trimExtend(e,t){return async function(e,t,r){t=d.Z.from(t);const n=(0,p.n)(t),s=(0,u.en)(e),i={...s.query,f:"json",...n},a=t.sr,o=(0,u.lA)(i,r);return(0,N.default)(s.path+"/trimExtend",o).then((({data:e})=>(e.geometries||[]).map((({paths:e})=>new g.Z({spatialReference:a,paths:e})))))}(this.url,e,t)}union(e,t){return async function(e,t,r){const n=t[0].spatialReference,s=(0,u.en)(e),i={...s.query,f:"json",sr:JSON.stringify(n.toJSON()),geometries:JSON.stringify((0,_.F)(t))},a=(0,u.lA)(i,r);return(0,N.default)(s.path+"/union",a).then((({data:e})=>(0,f.im)(e.geometry).set({spatialReference:n})))}(this.url,e,t)}};m.UNIT_METER=9001,m.UNIT_GERMAN_METER=9031,m.UNIT_FOOT=9002,m.UNIT_SURVEY_FOOT=9003,m.UNIT_CLARKE_FOOT=9005,m.UNIT_FATHOM=9014,m.UNIT_NAUTICAL_MILE=9030,m.UNIT_SURVEY_CHAIN=9033,m.UNIT_SURVEY_LINK=9034,m.UNIT_SURVEY_MILE=9035,m.UNIT_KILOMETER=9036,m.UNIT_CLARKE_YARD=9037,m.UNIT_CLARKE_CHAIN=9038,m.UNIT_CLARKE_LINK=9039,m.UNIT_SEARS_YARD=9040,m.UNIT_SEARS_FOOT=9041,m.UNIT_SEARS_CHAIN=9042,m.UNIT_SEARS_LINK=9043,m.UNIT_BENOIT_1895A_YARD=9050,m.UNIT_BENOIT_1895A_FOOT=9051,m.UNIT_BENOIT_1895A_CHAIN=9052,m.UNIT_BENOIT_1895A_LINK=9053,m.UNIT_BENOIT_1895B_YARD=9060,m.UNIT_BENOIT_1895B_FOOT=9061,m.UNIT_BENOIT_1895B_CHAIN=9062,m.UNIT_BENOIT_1895B_LINK=9063,m.UNIT_INDIAN_FOOT=9080,m.UNIT_INDIAN_1937_FOOT=9081,m.UNIT_INDIAN_1962_FOOT=9082,m.UNIT_INDIAN_1975_FOOT=9083,m.UNIT_INDIAN_YARD=9084,m.UNIT_INDIAN_1937_YARD=9085,m.UNIT_INDIAN_1962_YARD=9086,m.UNIT_INDIAN_1975_YARD=9087,m.UNIT_FOOT_1865=9070,m.UNIT_RADIAN=9101,m.UNIT_DEGREE=9102,m.UNIT_ARCMINUTE=9103,m.UNIT_ARCSECOND=9104,m.UNIT_GRAD=9105,m.UNIT_GON=9106,m.UNIT_MICRORADIAN=9109,m.UNIT_ARCMINUTE_CENTESIMAL=9112,m.UNIT_ARCSECOND_CENTESIMAL=9113,m.UNIT_MIL6400=9114,m.UNIT_BRITISH_1936_FOOT=9095,m.UNIT_GOLDCOAST_FOOT=9094,m.UNIT_INTERNATIONAL_CHAIN=109003,m.UNIT_INTERNATIONAL_LINK=109004,m.UNIT_INTERNATIONAL_YARD=109001,m.UNIT_STATUTE_MILE=9093,m.UNIT_SURVEY_YARD=109002,m.UNIT_50KILOMETER_LENGTH=109030,m.UNIT_150KILOMETER_LENGTH=109031,m.UNIT_DECIMETER=109005,m.UNIT_CENTIMETER=109006,m.UNIT_MILLIMETER=109007,m.UNIT_INTERNATIONAL_INCH=109008,m.UNIT_US_SURVEY_INCH=109009,m.UNIT_INTERNATIONAL_ROD=109010,m.UNIT_US_SURVEY_ROD=109011,m.UNIT_US_NAUTICAL_MILE=109012,m.UNIT_UK_NAUTICAL_MILE=109013,m.UNIT_SQUARE_INCHES="esriSquareInches",m.UNIT_SQUARE_FEET="esriSquareFeet",m.UNIT_SQUARE_YARDS="esriSquareYards",m.UNIT_ACRES="esriAcres",m.UNIT_SQUARE_MILES="esriSquareMiles",m.UNIT_SQUARE_MILLIMETERS="esriSquareMillimeters",m.UNIT_SQUARE_CENTIMETERS="esriSquareCentimeters",m.UNIT_SQUARE_DECIMETERS="esriSquareDecimeters",m.UNIT_SQUARE_METERS="esriSquareMeters",m.UNIT_ARES="esriAres",m.UNIT_HECTARES="esriHectares",m.UNIT_SQUARE_KILOMETERS="esriSquareKilometers",(0,n._)([(0,s.Cb)()],m.prototype,"url",void 0),m=(0,n._)([(0,i.j)("esri.tasks.GeometryService")],m);const h=m}}]);